/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class serialInterface_SerialInterface */

#ifndef _Included_serialInterface_SerialInterface
#define _Included_serialInterface_SerialInterface
#ifdef __cplusplus
extern "C" {
#endif
    
/*
 * Class:     serialInterface_SerialInterface
 * Method:    openSerialPort
 * Signature: (LserialInterface/SerialConfig;)J
 */
JNIEXPORT jlong JNICALL Java_serialInterface_SerialInterface_openSerialPort
  (JNIEnv *, jobject, jobject);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    closeSerialPort
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_serialInterface_SerialInterface_closeSerialPort
  (JNIEnv *, jobject, jlong);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    writeSerialData
 * Signature: (J[BI)I
 */
JNIEXPORT jint JNICALL Java_serialInterface_SerialInterface_writeSerialData
  (JNIEnv *, jobject, jlong, jbyteArray, jint);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    readSerialData
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_serialInterface_SerialInterface_readSerialData__J
  (JNIEnv *, jobject, jlong);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    readSerialData
 * Signature: (JI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_serialInterface_SerialInterface_readSerialData__JI
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    readMultipleSerialData
 * Signature: ([J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_serialInterface_SerialInterface_readMultipleSerialData
  (JNIEnv *, jclass, jlongArray);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    test
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_serialInterface_SerialInterface_test
  (JNIEnv *, jobject);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    initializeIOBoard
 * Signature: (S)Z
 */
JNIEXPORT jboolean JNICALL Java_serialInterface_SerialInterface_initializeIOBoard
  (JNIEnv *, jobject, jshort);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    terminateIOBoardSession
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_serialInterface_SerialInterface_terminateIOBoardSession
  (JNIEnv *, jobject);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    initializeSCC16
 * Signature: (S)Z
 */
JNIEXPORT jboolean JNICALL Java_serialInterface_SerialInterface_initializeSCC16
  (JNIEnv *, jobject, jshort);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    setOutputs
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_serialInterface_SerialInterface_setOutputs
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    getIntInputs
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_serialInterface_SerialInterface_getIntInputs
  (JNIEnv *, jobject);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    getOutputs
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_serialInterface_SerialInterface_getOutputs
  (JNIEnv *, jobject);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    E_Stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_serialInterface_SerialInterface_EStop
  (JNIEnv *, jobject);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    getVMEstatus
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_serialInterface_SerialInterface_getVMEstatus
  (JNIEnv *, jobject);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    initVMEanalyzer
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_serialInterface_SerialInterface_initVMEanalyzer
  (JNIEnv *, jobject);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    genBusError
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_serialInterface_SerialInterface_genBusError
  (JNIEnv *, jobject, jint, jboolean);

/*
 * Class:     serialInterface_SerialInterface
 * Method:    getPortStatus
 * Signature: (J)I  
 */
JNIEXPORT jint JNICALL Java_serialInterface_SerialInterface_getPortStatus
        (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
